export const runtime='nodejs';export const dynamic='force-dynamic';import { NextRequest, NextResponse } from 'next/server';import { parseCsv, parseXlsx, UNIFIED_COLUMNS, type UnifiedRow } from '@/lib/parser';import { ensureAccount } from '@/lib/tenant';import { query } from '@/lib/db';async function insertRows(accountId:number, rows:UnifiedRow[]){if(!rows.length)return;const cols=UNIFIED_COLUMNS;const colList=cols.map(c=>`"${c}"`).join(', ');let text='INSERT INTO production (account_id, '+colList+', source_file) VALUES ';const params:any[]=[];rows.forEach((r,i)=>{if(i) text+=', ';const offs=i*(cols.length+1);text+=`($${offs+1}, `+cols.map((_,j)=>`$${offs+2+j}`).join(', ')+`, $${offs+cols.length+2})`;params.push(accountId,...cols.map(c=>(r as any)[c]??null), r.source_file??'inbound');});await query(text,params);}export async function POST(req:NextRequest){const secret=req.headers.get('x-inbound-secret')||'';if(!process.env.INBOUND_SHARED_SECRET||secret!==process.env.INBOUND_SHARED_SECRET){return NextResponse.json({error:'unauthorized'},{status:401});}const url=new URL(req.url);const accountSlug=url.searchParams.get('account')||req.headers.get('x-tenant')||'default';const accountId=await ensureAccount(accountSlug);const form=await req.formData();const files:File[]=[];for(const[,v]of form.entries()){if(v instanceof File){const name=v.name.toLowerCase();if(/\.(xlsx|csv)$/.test(name)) files.push(v);}}let inserted=0;for(const file of files){const buf=Buffer.from(await file.arrayBuffer());const name=file.name||'upload';let rows:UnifiedRow[]=[];if(/\.xlsx$/i.test(name)) rows=parseXlsx(buf,name); else if(/\.csv$/i.test(name)) rows=parseCsv(buf,name); if(rows.length){await insertRows(accountId,rows);inserted+=rows.length;}}return NextResponse.json({ok:true,tenant:accountSlug,inserted});}